import functions.function_display as display
import functions.function_UV as uv
import functions.function_photosensor as sensor
import functions.function_motor as motor
import functions.function_vibration as vibration


# import RPi.GPIO as GPIO
# from gpiozero import LED
from time import sleep
import tkinter as tk 
from screeninfo import get_monitors
import sys

import os
# import random
def start_machines():
    ################################################################################################################################
    ### Object properties 
    print("Object properties")
    origin_path = "/home/alchemy/PRINT/"
    origin_path_layers="/home/alchemy/LAYERS" 
    file_name=input("Name of the folder containing images (Need to be stored in PRINTS)")
    # continue_condition=input("did the print already start (press ENTER for NO)?")
    base_path=origin_path + file_name                                                                       #Folder path   
    black_image_path = "/home/alchemy/black_image.png"                                                      #Black image path

    sequence = sorted(os.listdir(base_path), key=lambda x: int(x.split('.')[0]))
    sequence= [os.path.join(base_path,name) for name in sequence]
    # print(sequence)                                                                                       #List of image paths 
    nb_layers = len([f for f in os.listdir(base_path) if os.path.isfile(os.path.join(base_path, f))])       

    layers_state_path = f"/home/alchemy/LAYERS/{file_name}.txt"                                             #file containing the layer's state of the print
    try:
        with open(layers_state_path, "r") as f:
            # Read all lines from the file and strip any extra whitespace or newlines
            layers_state_values = [int(line.strip()) for line in f.readlines()]
    except Exception as e:
        print(f"An error occurred while reading the file: {e}")
    #layers_state_values = [random.choice([0, 1]) for _ in range(nb_layers)]

    # Control that the numbre of layers are matching
    if nb_layers!=len(layers_state_values):
        print(f"number of layer not consistent: {nb_layers} in print and {len(layers_state_values)} in layer definition")
        sys.exit("error")
    ################################################################################################################################
    
    ################################################################################################################################
    ### MAIN START
    
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
    return uv_pin 












# Layer thickness definition
layer_thickness=float(input("layer thickness in mm"))
if not layer_thickness:
    layer_thickness=0.05
layer_index=0                                                                                           #Determines the current layer
Particles_state=1                                                                                       #Determines if the particles are dispersed or not 
################################################################################################################################

################################################################################################################################
